{"ast":null,"code":"import _toConsumableArray from\"/Users/administrator/Projects/school_tools_frontend_fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/administrator/Projects/school_tools_frontend_fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/Users/administrator/Projects/school_tools_frontend_fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/administrator/Projects/school_tools_frontend_fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/administrator/Projects/school_tools_frontend_fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/administrator/Projects/school_tools_frontend_fresh/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from\"react\";import TableR from'./TableR.js';import CollectionForm from'./CollectionForm.js';import DescriptionText from'./DescriptionText.js';import Selector from'./Selector.js';import CallbackButton from'./CallbackButton.js';import TableComponent from'./TableComponent.js';import HomebridingTable from'./HomebridingTable.js';import DatePicker from'./DatePicker.js';import DatePicker2 from'./DatePicker2.js';import LoginMenu from'./LoginMenu.js';import ParentView from\"./ParentView.js\";import Nav from\"./Nav.js\";import{BrowserRouter as Router,Switch,Route,Link}from\"react-router-dom\";import configValues from'../config.js';//// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\nvar uniqid=require('uniqid');// reference values from config.js\n//var students = configValues.students\n//var students = [\"Cottontail, Ralph\"]\nvar times=configValues.times;var classes=configValues.classes;var periods=configValues.periods;// headers for each type of table\nvar hwcHeaders=configValues.homeworkClubHeaders;var detentionHeaders=[];var misbehaviorCategories=[\"Inappropriate language\",\"Teasing\",\"Open computer\",\"Inappropriate use of computer\",\"Headphones on without specific permission\",\"Speaking out during class\",\"Tardiness\",\"Name-calling\",\"Disruptive behavior\",\"Not following directions\",\"Failure to do a chore\",\"Cell Phones out or in use\",\"Refusal to participate\",\"Food in a classroom\",\"Backpack or other materials not part of class, carried into class\"];function getFormattedDate(date){var year=date.getFullYear();var month=(1+date.getMonth()).toString();month=month.length>1?month:'0'+month;var day=date.getDate().toString();day=day.length>1?day:'0'+day;return month+'/'+day+'/'+year;}var AdminHomeworkClubView=/*#__PURE__*/function(_React$Component){_inherits(AdminHomeworkClubView,_React$Component);var _super=_createSuper(AdminHomeworkClubView);function AdminHomeworkClubView(){var _this;_classCallCheck(this,AdminHomeworkClubView);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={homeworkEntries:[],detentionEntries:[],dueDate:\"\",descriptionText:\"\"};return _this;}_createClass(AdminHomeworkClubView,[{key:\"componentDidMount\",// GET all currentHomeworkClubEntries data to populate table with and store them in state as \"homeworkEntries\"\nvalue:function componentDidMount(){var _this2=this;fetch(configValues.serverURL+\"/api/adminHomeworkClub\",{method:'GET'}).then(function(res){return res.json();}).then(function(homeworkEntries){return _this2.initialTablePopulation(homeworkEntries);});this.setState({dueDate:getFormattedDate(new Date())});}// a helper function that converts information from the 'currentHomeworkClubEntries' MongoDB collection \n// into the initial TableComponent entries displayed by the TableR component\n},{key:\"initialTablePopulation\",value:function initialTablePopulation(listOfEntries){var _this3=this;console.log(listOfEntries);// for each value (aka property) of the MongoDB document object, append a TableComponent to the list of homeworkEntries\nvar _loop=function _loop(){var _Object$entries$_i=_slicedToArray(_Object$entries[_i],2),key=_Object$entries$_i[0],value=_Object$entries$_i[1];console.log(\" *** value *** \",value);// TODO: use the entries ObjectId value as the reference index so we can delete it from DB later down the road\n_this3.setState(function(prevState){return{homeworkEntries:[].concat(_toConsumableArray(prevState.homeworkEntries),[/*#__PURE__*/React.createElement(TableComponent,{id:uniqid(),referenceIndex:value._id,studentName:value.student.fname+\" \"+value.student.lname,selectorValue:value.class,description:value.description,dueDate:value.date,callbackRef:function callbackRef(event){return _this3.onClickRemoveCard(event);}})])};});};for(var _i=0,_Object$entries=Object.entries(listOfEntries);_i<_Object$entries.length;_i++){_loop();}}// POST a new table entry into the currentHomeworkClubEntries collection in the DB\n},{key:\"onClickAddHomeworkCard\",value:function onClickAddHomeworkCard(){var _this4=this;// splice first and last name into two seperate values\nvar splicedName=document.querySelector('#studentName').value.split(', ');// data sent in the body to the express server for saving in MongoDB\nvar data={date:document.querySelector('#date').value,assignedBy:\"Mr.Lowe\",period:document.querySelector('#classPeriod').value,class:document.querySelector('#classSection').value,description:document.querySelector('#descriptionText').value,// for Mongoose to query student ObjectId \nstudentFname:splicedName[1],studentLname:splicedName[0]};// perform POST API operation to create a new currentHomeworkClub document in DB\nfetch(configValues.serverURL+\"/api/adminHomeworkClub\",{method:'POST',headers:new Headers({'Content-Type':'application/json'}),body:JSON.stringify(data)}).then(function(res){return res.json();})// use the responseObject's _id field for the TableComponent's referenceIndex property\n// we use this value in onClickRemoveCard to filter it out later\n.then(function(responseObject){return _this4.additionalTablePopulation(responseObject._id);});}// a helper function which adds additional TableR entries using the _id of the latest created document object\n},{key:\"additionalTablePopulation\",value:function additionalTablePopulation(responseId){var _this5=this;var splicedName=document.querySelector('#studentName').value.split(', ');// the TableR component needs a TableComponent appended to it as well since we now have an \n// additonal homeworkEntry!\nthis.setState(function(prevState){return{homeworkEntries:[].concat(_toConsumableArray(prevState.homeworkEntries),[/*#__PURE__*/React.createElement(TableComponent// THIS ID COULD BE A MAJOR PROBLEM FOR DELETING TABLE ENTRIES! \n,{id:uniqid()// THIS REFERENCE COULD BE A MAJOR PROBLEM!\n,referenceIndex:responseId,studentName:splicedName[1]+\" \"+splicedName[0],selectorValue:document.querySelector('#classSection').value,description:document.querySelector('#descriptionText').value,dueDate:document.querySelector('#date').value,callbackRef:function callbackRef(event){return _this5.onClickRemoveCard(event);}})])};});}},{key:\"onClickRemoveCard\",value:function onClickRemoveCard(event){// data sent in the body to the express server for saving in MongoDB\nvar data={referenceId:event.target.id};console.log(event.target.id);// perform fetch with DELETE header\nfetch(configValues.serverURL+\"/api/adminHomeworkClub\",{method:'DELETE',headers:new Headers({'Content-Type':'application/json'}),body:JSON.stringify(data)}).then(function(res){return res.json();});// remove the TableComponent from the current list via filter\nthis.setState({homeworkEntries:this.state.homeworkEntries.filter(function(entry){// return all entries which do not share the id of the target entry\nreturn entry.props.referenceIndex!==event.target.id;})});}},{key:\"render\",value:function render(){var _this6=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(CollectionForm,{collectionLegend:\"Detentions\"},/*#__PURE__*/React.createElement(Selector,{configObjectValue:\"studentName\",arrayToMap:this.props.students,labelText:\"Select a student: \"}),/*#__PURE__*/React.createElement(Selector,{configObjectValue:\"classSection\",arrayToMap:classes,labelText:\"Class of detention: \"}),/*#__PURE__*/React.createElement(Selector,{configObjectValue:\"classPeriod\",arrayToMap:periods,labelText:\"Class period detention was issued: \"}),/*#__PURE__*/React.createElement(Selector,{configObjectValue:\"misbehaviorCategory\",arrayToMap:misbehaviorCategories,labelText:\"Category of misbehavior\"}),/*#__PURE__*/React.createElement(DatePicker,{callbackFunction:function callbackFunction(){return _this6.setState({dueDate:document.querySelector('#date').value});},passedStateValue:this.state.dueDate}),/*#__PURE__*/React.createElement(CallbackButton,{callbackFunction:function callbackFunction(){return _this6.onClickAddHomeworkCard();},buttonDisplayValue:\"Add Student\"})),/*#__PURE__*/React.createElement(TableR,{entries:this.state.homeworkEntries,tableHeaders:hwcHeaders,tableLegend:\"Homework Club Entries\"}));}}]);return AdminHomeworkClubView;}(React.Component);export default AdminHomeworkClubView;","map":{"version":3,"sources":["/Users/administrator/Projects/school_tools_frontend_fresh/src/components/AdminDetentionsView.js"],"names":["React","TableR","CollectionForm","DescriptionText","Selector","CallbackButton","TableComponent","HomebridingTable","DatePicker","DatePicker2","LoginMenu","ParentView","Nav","BrowserRouter","Router","Switch","Route","Link","configValues","uniqid","require","times","classes","periods","hwcHeaders","homeworkClubHeaders","detentionHeaders","misbehaviorCategories","getFormattedDate","date","year","getFullYear","month","getMonth","toString","length","day","getDate","AdminHomeworkClubView","state","homeworkEntries","detentionEntries","dueDate","descriptionText","fetch","serverURL","method","then","res","json","initialTablePopulation","setState","Date","listOfEntries","console","log","key","value","prevState","_id","student","fname","lname","class","description","event","onClickRemoveCard","Object","entries","splicedName","document","querySelector","split","data","assignedBy","period","studentFname","studentLname","headers","Headers","body","JSON","stringify","responseObject","additionalTablePopulation","responseId","referenceId","target","id","filter","entry","props","referenceIndex","students","onClickAddHomeworkCard","Component"],"mappings":"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","sourcesContent":["import React from \"react\"\n\nimport TableR from './TableR.js';\n\nimport CollectionForm from './CollectionForm.js';\nimport DescriptionText from './DescriptionText.js';\nimport Selector from './Selector.js';\nimport CallbackButton from './CallbackButton.js';\nimport TableComponent from './TableComponent.js';\n\nimport HomebridingTable from './HomebridingTable.js';\n\nimport DatePicker from './DatePicker.js';\nimport DatePicker2 from './DatePicker2.js';\n\nimport LoginMenu from './LoginMenu.js';\nimport ParentView from \"./ParentView.js\";\nimport Nav from \"./Nav.js\";\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport configValues from '../config.js';\n\n//// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\nvar uniqid = require('uniqid');\n\n// reference values from config.js\n//var students = configValues.students\n//var students = [\"Cottontail, Ralph\"]\nvar times = configValues.times\nvar classes = configValues.classes\nvar periods = configValues.periods\n\n// headers for each type of table\nvar hwcHeaders = configValues.homeworkClubHeaders\nvar detentionHeaders = []\nvar misbehaviorCategories = [\n    \"Inappropriate language\", \"Teasing\", \"Open computer\", \"Inappropriate use of computer\", \"Headphones on without specific permission\", \"Speaking out during class\"\n    , \"Tardiness\", \"Name-calling\", \"Disruptive behavior\", \"Not following directions\", \"Failure to do a chore\", \"Cell Phones out or in use\", \"Refusal to participate\", \n    \"Food in a classroom\", \"Backpack or other materials not part of class, carried into class\"\n]\n\n\nfunction getFormattedDate(date) {\n    var year = date.getFullYear();\n\n    var month = (1 + date.getMonth()).toString();\n    month = month.length > 1 ? month : '0' + month;\n\n    var day = date.getDate().toString();\n    day = day.length > 1 ? day : '0' + day;\n\n    return month + '/' + day + '/' + year;\n}\n\nclass AdminHomeworkClubView extends React.Component {\n    state = {\n        homeworkEntries: [],\n        detentionEntries: [],\n        dueDate: \"\",\n        descriptionText: \"\",\n    }\n\n    // GET all currentHomeworkClubEntries data to populate table with and store them in state as \"homeworkEntries\"\n    componentDidMount() {\n        fetch(configValues.serverURL + \"/api/adminHomeworkClub\", {\n            method: 'GET'\n        })\n            .then(res => res.json())\n            .then(homeworkEntries => this.initialTablePopulation(homeworkEntries))\n\n        this.setState({\n            dueDate: getFormattedDate(new Date())\n        })\n    }\n\n    // a helper function that converts information from the 'currentHomeworkClubEntries' MongoDB collection \n    // into the initial TableComponent entries displayed by the TableR component\n    initialTablePopulation(listOfEntries) {\n        console.log(listOfEntries)\n        // for each value (aka property) of the MongoDB document object, append a TableComponent to the list of homeworkEntries\n        for (let [key, value] of Object.entries(listOfEntries)) {\n            console.log(\" *** value *** \", value)\n            // TODO: use the entries ObjectId value as the reference index so we can delete it from DB later down the road\n\n            this.setState(prevState => ({\n                homeworkEntries: [...prevState.homeworkEntries,\n                <TableComponent\n                    id={uniqid()}\n                    referenceIndex={value._id}\n                    studentName={value.student.fname + \" \" + value.student.lname}\n                    selectorValue={value.class}\n                    description={value.description}\n                    dueDate={value.date}\n                    callbackRef={(event) => this.onClickRemoveCard(event)}\n                />\n                ]\n            }))\n        }\n    }\n\n    // POST a new table entry into the currentHomeworkClubEntries collection in the DB\n    onClickAddHomeworkCard() {\n        // splice first and last name into two seperate values\n        var splicedName = document.querySelector('#studentName').value.split(', ')\n\n        // data sent in the body to the express server for saving in MongoDB\n        var data = {\n            date: document.querySelector('#date').value,\n            assignedBy: \"Mr.Lowe\",\n            period: document.querySelector('#classPeriod').value,\n            class: document.querySelector('#classSection').value,\n            description: document.querySelector('#descriptionText').value,\n            // for Mongoose to query student ObjectId \n            studentFname: splicedName[1],\n            studentLname: splicedName[0]\n        }\n\n        // perform POST API operation to create a new currentHomeworkClub document in DB\n        fetch(configValues.serverURL + \"/api/adminHomeworkClub\", {\n            method: 'POST',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n            // use the responseObject's _id field for the TableComponent's referenceIndex property\n            // we use this value in onClickRemoveCard to filter it out later\n            .then(responseObject => this.additionalTablePopulation(responseObject._id))\n    }\n\n    // a helper function which adds additional TableR entries using the _id of the latest created document object\n    additionalTablePopulation(responseId) {\n        var splicedName = document.querySelector('#studentName').value.split(', ')\n\n        // the TableR component needs a TableComponent appended to it as well since we now have an \n        // additonal homeworkEntry!\n        this.setState(prevState => ({\n            homeworkEntries: [...prevState.homeworkEntries,\n            <TableComponent\n                // THIS ID COULD BE A MAJOR PROBLEM FOR DELETING TABLE ENTRIES! \n                id={uniqid()}\n                // THIS REFERENCE COULD BE A MAJOR PROBLEM!\n                referenceIndex={responseId}\n                studentName={splicedName[1] + \" \" + splicedName[0]}\n                selectorValue={document.querySelector('#classSection').value}\n                description={document.querySelector('#descriptionText').value}\n                dueDate={document.querySelector('#date').value}\n                callbackRef={(event) => this.onClickRemoveCard(event)}\n            />\n            ]\n        }))\n    }\n\n    onClickRemoveCard(event) {\n        // data sent in the body to the express server for saving in MongoDB\n        var data = {\n            referenceId: event.target.id,\n        }\n\n        console.log(event.target.id)\n\n        // perform fetch with DELETE header\n        fetch(configValues.serverURL + \"/api/adminHomeworkClub\", {\n            method: 'DELETE',\n            headers: new Headers({ 'Content-Type': 'application/json' }),\n            body: JSON.stringify(data)\n        })\n            .then(res => res.json())\n\n        // remove the TableComponent from the current list via filter\n        this.setState(\n            {\n                homeworkEntries: this.state.homeworkEntries.filter(function (entry) {\n                    // return all entries which do not share the id of the target entry\n                    return entry.props.referenceIndex !== event.target.id\n                })\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <CollectionForm collectionLegend={\"Detentions\"}>\n                    <Selector\n                        configObjectValue=\"studentName\"\n                        arrayToMap={this.props.students}\n                        labelText=\"Select a student: \"\n                    />\n                    <Selector\n                        configObjectValue=\"classSection\"\n                        arrayToMap={classes}\n                        labelText=\"Class of detention: \"\n                    />\n                    <Selector\n                        configObjectValue=\"classPeriod\"\n                        arrayToMap={periods}\n                        labelText=\"Class period detention was issued: \"\n                    />\n                    <Selector\n                        configObjectValue=\"misbehaviorCategory\"\n                        arrayToMap={misbehaviorCategories}\n                        labelText=\"Category of misbehavior\"\n                    />\n                    <DatePicker\n                        callbackFunction={() => this.setState({ dueDate: document.querySelector('#date').value })}\n                        passedStateValue={this.state.dueDate}\n                    />\n                    <CallbackButton callbackFunction={() => this.onClickAddHomeworkCard()} buttonDisplayValue=\"Add Student\" />\n                </CollectionForm>\n\n                <TableR entries={this.state.homeworkEntries} tableHeaders={hwcHeaders} tableLegend=\"Homework Club Entries\" />\n            </div >\n        )\n    }\n}\n\nexport default AdminHomeworkClubView"]},"metadata":{},"sourceType":"module"}