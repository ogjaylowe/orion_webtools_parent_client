{"ast":null,"code":"var _jsxFileName = \"/Users/administrator/Projects/school_tools_frontend_fresh/src/components/AdminClient.js\";\nimport React from 'react';\nimport LoginMenu from './LoginMenu.js';\nimport AdminView from \"./AdminView.js\";\nimport CollectionForm from './CollectionForm.js';\nimport configValues from \"../config.js\"; // React libraries\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; //// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\n\nvar uniqid = require('uniqid');\n\nvar Loader = require('react-loader'); // TODO: add a link to the 'home' route from here so that\n// users land on / and can't leave in the form of a conditional\n// rendering function (call ParentView on success with StudentID passed in)\n// goal: parents start in login menu, upon success something allows them into the\n// parent view with the StudentID as a prop\n\n\nclass AdminClient extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: \"\",\n      password: \"\",\n      loginState: \"\",\n      admin: false,\n      loading: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      loginState: /*#__PURE__*/React.createElement(CollectionForm, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LoginMenu, {\n        callbackButton: () => this.authCheck(),\n        callbackOnChangeUsername: event => this.updateUsernameState(event),\n        callbackOnChangePassword: event => this.updatePasswordState(event),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }\n      }))\n    });\n  } // updates the state on keystroke change\n\n\n  updateUsernameState(event) {\n    this.setState({\n      username: event.target.value\n    });\n  }\n\n  updatePasswordState(event) {\n    this.setState({\n      password: event.target.value\n    });\n  } // TODO: update the fetch to search for a parent username and password!\n\n\n  async authCheck() {\n    console.log(\"authcheck started, update finished9!\", configValues.serverURL);\n    this.setState({\n      loading: \"true\"\n    });\n    await fetch(configValues.serverURL + \"/admin\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'Origin': 'https://ogjaylowe.github.io'\n      },\n      body: JSON.stringify({\n        username: this.state.username,\n        password: this.state.password\n      })\n    }).then(res => res.json()).then(admin => {\n      console.log(admin);\n\n      if (admin != false) {\n        this.setState({\n          admin\n        });\n      }\n    }).then(() => this.conditionalCheck()).then(() => this.setState({\n      loading: \"false\"\n    }));\n  } // performs auth check\n\n\n  conditionalCheck() {\n    if (this.state.admin != false) {\n      this.setState({\n        loginState: /*#__PURE__*/React.createElement(AdminView, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 41\n          }\n        })\n      });\n    } else {\n      alert(this.state.condition + \" is not a registered username!\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      loaded: this.state.loaded,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 29\n      }\n    }, this.state.loginState)))));\n  }\n\n}\n\nexport default AdminClient;","map":{"version":3,"sources":["/Users/administrator/Projects/school_tools_frontend_fresh/src/components/AdminClient.js"],"names":["React","LoginMenu","AdminView","CollectionForm","configValues","BrowserRouter","Router","Switch","Route","Link","uniqid","require","Loader","AdminClient","Component","state","username","password","loginState","admin","loading","componentDidMount","setState","authCheck","event","updateUsernameState","updatePasswordState","target","value","console","log","serverURL","fetch","method","headers","body","JSON","stringify","then","res","json","conditionalCheck","alert","condition","render","loaded"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport LoginMenu from './LoginMenu.js';\nimport AdminView from \"./AdminView.js\";\n\nimport CollectionForm from './CollectionForm.js'\n\nimport configValues from \"../config.js\"\n\n\n// React libraries\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n//// **** INITIALIZATIONS **** ////\n// sets up the uniqid hashing function for use with component id's\nvar uniqid = require('uniqid');\nvar Loader = require('react-loader');\n\n\n\n// TODO: add a link to the 'home' route from here so that\n// users land on / and can't leave in the form of a conditional\n// rendering function (call ParentView on success with StudentID passed in)\n\n// goal: parents start in login menu, upon success something allows them into the\n// parent view with the StudentID as a prop\n\nclass AdminClient extends React.Component {\n    state = { username: \"\", password: \"\", loginState: \"\", admin: false, loading: false }\n\n    componentDidMount() {\n        this.setState({\n            loginState:\n                <CollectionForm >\n                    <LoginMenu\n                        callbackButton={() => this.authCheck()}\n                        callbackOnChangeUsername={(event) => this.updateUsernameState(event)}\n                        callbackOnChangePassword={(event) => this.updatePasswordState(event)}\n                    />\n                </CollectionForm>\n        })\n    }\n\n    // updates the state on keystroke change\n    updateUsernameState(event) {\n        this.setState({ username: event.target.value })\n    }\n\n    updatePasswordState(event) {\n        this.setState({ password: event.target.value })\n    }\n\n    // TODO: update the fetch to search for a parent username and password!\n    async authCheck() {\n        console.log(\"authcheck started, update finished9!\", configValues.serverURL)\n        this.setState({loading: \"true\"})\n\n        await fetch(configValues.serverURL + \"/admin\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                'Origin': 'https://ogjaylowe.github.io'\n            },\n            body: JSON.stringify({ username: this.state.username, password: this.state.password })\n        })\n            .then(res => res.json())\n            .then(admin => {\n                console.log(admin)\n                if (admin != false) {\n                    this.setState({ admin })\n                }\n            })\n            .then(() => this.conditionalCheck())\n            .then(() => this.setState({loading: \"false\"}))\n    }\n\n    // performs auth check\n    conditionalCheck() {\n        if (this.state.admin != false) {\n            this.setState({ loginState: <AdminView /> })\n        } else {\n            alert(this.state.condition + \" is not a registered username!\")\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router>\n                    <Switch>\n                        <Route path=\"/\" >\n                            <Loader loaded={this.state.loaded}>\n                                {this.state.loginState}\n                            </Loader>\n                        </Route>\n                    </Switch>\n                </Router>\n            </div >\n        )\n    }\n}\n\nexport default AdminClient"]},"metadata":{},"sourceType":"module"}